<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="jag">

    <property file="../.ant-global.properties"/>
    <property environment="env"/>
    <property name="project.name" value="jag"/>
    <property name="src" value="src"/>
    <property name="lib" value="lib"/>
    <property name="templates" value="templates"/>
    <property name="build.jag" value="classes"/>
    <property name="temp.dir" value="temp"/>
    <property name="dist" value="${lib}"/>
    <property name="bin" value="bin"/>
    <property name="jarname.jag" value="${dist}/jag.jar"/>
    <property name="conf.dir" value="conf"/>
    <property name="doc.dir" value="doc"/>
    <property name="docbook.dir" value="${doc.dir}/docbook"/>
    <property name="docbook.dir.html" value="${docbook.dir}/html"/>
    <property name="docbook.dir.pdf" value="${docbook.dir}/pdf"/>
    <property name="docbook.dir.css" value="${docbook.dir}/css"/>
    <property name="docbook.images" value="${docbook.dir}/images"/>
    <property name="docbook.xsl.version" value="1.64.1"/>
    <property name="docbook.xsl.dir" value="docbook-xsl-${docbook.xsl.version}"/>
    <property name="MailLogger.failure.to" value="rudie@finalist.com"/>
    <property name="finalist.ant.version" value="1.3"/>


    <path id="classpath">
        <fileset dir="${lib}">
            <include name="*.jar"/>
            <include name="docbook/*.jar"/>
        </fileset>
        <pathelement location="${src}"/>
        <pathelement location="test/java"/>
        <pathelement location="${build.jag}"/>

    </path>

    <target name="all" depends="checkout.lib, jar.jag"/>

    <target name="set.proxy" depends="check.proxy" if="has.proxy">
        <echo message="Using HTTP proxy as ${env.PROXY_HOST}:${env.PROXY_PORT}..."/>
        <setproxy proxyhost="${env.PROXY_HOST}" proxyport="${env.PROXY_PORT}"/>
    </target>
    <target name="check.proxy" unless="nothing.to.download">
        <condition property="has.proxy">
            <not>
                <contains string="${env.PROXY_PORT}" substring="env.PROXY_PORT"/>
            </not>
        </condition>
    </target>


    <target name="checkout.lib" description="CVS-checkout for needed JARs." depends="init.checkout.lib">
        <taskdef name="checkout" classpathref="classpath"
            classname="com.finalist.tools.ant.taskdefs.CheckoutLibTask"/>
        <checkout libXmlFile="${conf.dir}/lib.xml" libDir="${lib}" tmpDir="${temp.dir}"/>
    </target>

    <target name="init.checkout.lib" depends="init">
        <mkdir dir="${lib}"/>
        <available property="finalist-ant.available" file="${lib}/finalist-ant-${finalist.ant.version}.jar"/>
        <available property="lib.dtd.present" file="${conf.dir}/lib.dtd"/>
        <antcall target="checkout.finalist.ant"/>
    </target>

    <target name="checkout.finalist.ant" depends="check.libs, get.libs"/>
    <target name="check.libs">
        <available file="${lib}/finalist-ant-${finalist.ant.version}.jar" property="finalist-ant.present"/>
        <available file="${conf.dir}/lib.dtd" property="lib-dtd.present"/>
        <condition property="nothing.to.download">
            <and>
                <isset property="finalist.ant.present"/>
                <isset property="lib.dtd.present"/>
            </and>
        </condition>
    </target>
    <target name="get.libs">
        <condition property="proxy.needs.setting">
            <and>
                <isfalse value="nothing.to.download"/>
                <not>
                    <equals arg1="" arg2="${proxy.host}" trim="true"/>
                </not>
            </and>
        </condition>
        <antcall target="set.proxy"/>
        <antcall target="get.finalist.ant"/>
        <antcall target="get.lib.dtd"/>
    </target>

    <target name="get.finalist.ant" unless="finalist-ant.present">
        <get src="http://jag.sourceforge.net/download/jag/jars/finalist-ant-${finalist.ant.version}.jar" dest="${lib}/finalist-ant-${finalist.ant.version}.jar"/>
    </target>
    <target name="get.lib.dtd" unless="lib.dtd.present">
        <get src="http://jag.sourceforge.net/download/lib.dtd" dest="${conf.dir}/lib.dtd"/>
    </target>

    <target name="internet.access.warn" unless="nothing.to.download">
        <echo>
         ======================== INTERNET ACCESS REQUIRED ========================
         In order to download the required dependent library files, your system
         needs to access the JAG project webserver at SourceForge.
         If you see 403 connection errors below, most likely your system requires
         you to connect through an HTTP proxy.  You will have to specify the proxy
         connection information from the command-line as shown in the example below:

         (DOS SHELL)                                (UNIX SHELL)
         set PROXY_HOST=192.168.1.10                export PROXY_HOST=192.168.1.10
         set PROXY_PORT=3128                        export PROXY_PORT=3128
         ==========================================================================
        </echo>
    </target>

    <target name="init">
        <mkdir dir="${build.jag}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${bin}"/>
        <mkdir dir="${lib}"/>
    </target>

    <target name="jar.jag" depends="build.jag">
        <jar basedir="${build.jag}" jarfile="${jarname.jag}">
            <manifest>
                <attribute name="Main-Class" value="com.finalist.jaggenerator.JagGenerator"/>
            </manifest>
        </jar>
        <delete dir="${build.jag}/META-INF"/>
    </target>

    <target name="build.jag" depends="init">
        <javac debug="true" destdir="${build.jag}" srcdir="${src}">
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="gui" depends="jar.jag">
        <java fork="true" classname="com.finalist.jaggenerator.JagGenerator" dir="${bin}">
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>
    </target>

    <!--
    Usage: the following parameters can be passed to JAG:
        - output directory
        - application xml file.
        - overwrite (true|false)
        - exit on finish (true|false)
    -->
    <target name="run" depends="jar.jag" description="Command line version of JAG">
        <property name="target.dir" value="/temp/example"/>
        <delete dir="${target.dir}" failonerror="false"/>
        <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">
            <arg value="${target.dir}"/>
            <arg value="applicationFiles/example.xml"/>
            <arg value="true"/>
            <arg value="true"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}" target="all.appserver"/>
    </target>


    <target name="clean">
        <delete dir="${build.jag}"/>
    </target>

    <!--
    These are regression tests for JAG:
    The different test cases represent different business tier configurations.
    The sources will be generated and the generated sources will be build.
    Als the test and checkstyle tasks of the generated project will be called.
    -->
    <target name="test.integration" depends="jar.jag" description="Run the JAG test cases.">
        <property name="target.dir" value="/temp"/>


        <property name="testcase4" value="multiple-relations-tomcat5-hibernate3"/>
        <delete dir="${target.dir}/${testcase4}" failonerror="false"/>
        <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

            <arg value="${target.dir}/${testcase4}"/>
            <arg value="../test/resources/${testcase4}.xml"/>
            <arg value="true"/>
            <arg value="true"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>

        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase4}" target="all.appserver"/>
        <!-- Tis will test the webservice stub generation -->

        <exec executable="ant" dir="${target.dir}/${testcase4}" vmlauncher="false">
             <arg value="axis.wsdl2java"/>
         </exec>
        <!-- Now build again, to see if the stubs compile -->
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase4}" target="all.appserver"/>

        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase4}" target="test"/>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase4}" target="checkstyle"/>


        <property name="testcase1" value="multiple-relations-tomcat5-hibernate2"/>
        <delete dir="${target.dir}/${testcase1}" failonerror="false"/>
        <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

            <arg value="${target.dir}/${testcase1}"/>
            <arg value="../test/resources/${testcase1}.xml"/>
            <arg value="true"/>
            <arg value="true"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase1}" target="all.appserver"/>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase1}" target="test"/>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase1}" target="checkstyle"/>


        <property name="testcase2" value="multiple-relations-weblogic-ejb2"/>
        <delete dir="${target.dir}/${testcase2}" failonerror="false"/>
        <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

            <arg value="${target.dir}/${testcase2}"/>
            <arg value="../test/resources/${testcase2}.xml"/>
            <arg value="true"/>
            <arg value="true"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase2}" target="all.appserver"/>
        <!-- Client jars needed for this:
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase2}" target="test"/>
        -->
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase2}" target="checkstyle"/>

        <property name="testcase5" value="multiple-relations-jboss-spring-hibernate3" />
        <delete dir="${target.dir}/${testcase5}" failonerror="false"/>
        <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">
            <arg value="${target.dir}/${testcase5}"/>
            <arg value="../test/resources/${testcase5}.xml"/>
            <arg value="true"/>
            <arg value="true"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>

        <!-- This test still fails on finding the generated wsdl -->
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase5}" target="all.appserver"/>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase5}" target="test"/>
        <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase5}" target="checkstyle"/>


        <!--
        This EJB3 testcase will only test generation, since building requires JDK 1.5
        -->
        <property name="testcase3" value="multiple-relations-jboss4-ejb3"/>
        <delete dir="${target.dir}/${testcase3}" failonerror="false"/>
        <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

            <arg value="${target.dir}/${testcase3}"/>
            <arg value="../test/resources/${testcase3}.xml"/>
            <arg value="true"/>
            <arg value="true"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>


    </target>


   <!--
   These are regression tests for JAG for java 5:
   The different test cases represent different business tier configurations.
   The sources will be generated and the generated sources will be build.
   All the test and checkstyle tasks of the generated project will be called.
   The junit tests will be run on a HSQLDB with testdata for spring configurations.
   -->
   <target name="test5.integration" depends="jar.jag" description="Run the JAG test cases for java5.">
       <property name="target.dir" value="/temp"/>
      <!-- Test the 2tier templates -->


      <property name="testcase18" value="2tier-spring-tapestry-multiple-relations-tomcat5-hibernate3-many-to-many"/>
      <delete dir="${target.dir}/${testcase18}" failonerror="false"/>
      <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

          <arg value="${target.dir}/${testcase18}"/>
          <arg value="../test/resources/${testcase18}.xml"/>
          <arg value="true"/>
          <arg value="true"/>
          <classpath>
              <path refid="classpath"/>
          </classpath>
      </java>
      <!-- Copy the JUnit tests, that will test the business tier -->
      <copy todir="${target.dir}/${testcase18}/src/java-test" overwrite="true">
          <fileset dir="test/resources">
            <include name="**/UserManager2Test.java" />
            <include name="**/UserManager3Test.java" />
          </fileset>
      </copy>
      <!-- Copy the test hsqld database -->
      <copy todir="${target.dir}/${testcase18}" overwrite="true">
          <fileset dir="test/resources" includes="example.properties,example.script" />
      </copy>
      <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase18}" target="all.appserver"/>
      <exec executable="ant" dir="${target.dir}/${testcase18}" vmlauncher="false">
           <arg value="test"/>
      </exec>


      <property name="testcase17" value="2tier-servicelocator-hibernate3-tapestry-security"/>
      <delete dir="${target.dir}/${testcase17}" failonerror="false"/>
      <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

          <arg value="${target.dir}/${testcase17}"/>
          <arg value="../test/resources/${testcase17}.xml"/>
          <arg value="true"/>
          <arg value="true"/>
          <classpath>
              <path refid="classpath"/>
          </classpath>
      </java>

      <!-- Copy the JUnit tests, that will test the business tier -->
      <copy todir="${target.dir}/${testcase17}/src/java-test" overwrite="true">
          <fileset dir="test/resources">
            <include name="**/UserManager2Test.java" />
          </fileset>
      </copy>
       <!--
        The testcase have been written for Spring.
        For the service locator examples, replace:
       org.springframework.test.AbstractDependencyInjectionSpringContextTests
       by
       junit.framework.TestCase -->
      <replace dir="${target.dir}/${testcase17}/src/java-test">
          <replacetoken>org.springframework.test.AbstractTransactionalDataSourceSpringContextTests</replacetoken>
          <replacevalue>junit.framework.TestCase</replacevalue>
      </replace>
      <!-- Copy the test hsqld database -->
      <copy todir="${target.dir}/${testcase17}" overwrite="true">
          <fileset dir="test/resources" includes="example.properties,example.script" />
      </copy>
      <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase17}" target="all.appserver"/>
      <exec executable="ant" dir="${target.dir}/${testcase17}" vmlauncher="false">
           <arg value="test"/>
      </exec>

      <property name="testcase16" value="2tier-spring-hibernate3-tapestry-security"/>
      <delete dir="${target.dir}/${testcase16}" failonerror="false"/>
      <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

          <arg value="${target.dir}/${testcase16}"/>
          <arg value="../test/resources/${testcase16}.xml"/>
          <arg value="true"/>
          <arg value="true"/>
          <classpath>
              <path refid="classpath"/>
          </classpath>
      </java>
      <!-- Copy the JUnit tests, that will test the business tier -->
      <copy todir="${target.dir}/${testcase16}/src/java-test" overwrite="true">
          <fileset dir="test/resources">
            <include name="**/UserManager2Test.java" />
          </fileset>
      </copy>
      <!-- Copy the test hsqld database -->
      <copy todir="${target.dir}/${testcase16}" overwrite="true">
          <fileset dir="test/resources" includes="example.properties,example.script" />
      </copy>
      <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase16}" target="all.appserver"/>
      <exec executable="ant" dir="${target.dir}/${testcase16}" vmlauncher="false">
           <arg value="test"/>
      </exec>


       <property name="testcase13" value="2tier-spring-multiple-relations-tomcat5-hibernate3-many-to-many"/>
       <delete dir="${target.dir}/${testcase13}" failonerror="false"/>
       <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

           <arg value="${target.dir}/${testcase13}"/>
           <arg value="../test/resources/${testcase13}.xml"/>
           <arg value="true"/>
           <arg value="true"/>
           <classpath>
               <path refid="classpath"/>
           </classpath>
       </java>
       <!-- Copy the JUnit tests, that will test the business tier -->
       <copy todir="${target.dir}/${testcase13}/src/java-test" overwrite="true">
           <fileset dir="test/resources">
             <include name="**/UserManager2Test.java" />
             <include name="**/UserManager3Test.java" />
           </fileset>
       </copy>
       <!-- Copy the test hsqld database -->
       <copy todir="${target.dir}/${testcase13}" overwrite="true">
           <fileset dir="test/resources" includes="example.properties,example.script" />
       </copy>
       <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase13}" target="all.appserver"/>
       <exec executable="ant" dir="${target.dir}/${testcase13}" vmlauncher="false">
            <arg value="test"/>
       </exec>



      <property name="testcase14" value="2tier-spring-multiple-relations-tomcat5-hibernate3"/>
      <delete dir="${target.dir}/${testcase14}" failonerror="false"/>
      <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

          <arg value="${target.dir}/${testcase14}"/>
          <arg value="../test/resources/${testcase14}.xml"/>
          <arg value="true"/>
          <arg value="true"/>
          <classpath>
              <path refid="classpath"/>
          </classpath>
      </java>
      <!-- Copy the JUnit tests, that will test the business tier -->
      <copy todir="${target.dir}/${testcase14}/src/java-test" overwrite="true">
          <fileset dir="test/resources">
            <include name="**/UserManager2Test.java" />
          </fileset>
      </copy>
      <!-- Copy the test hsqld database -->
      <copy todir="${target.dir}/${testcase14}" overwrite="true">
          <fileset dir="test/resources" includes="example.properties,example.script" />
      </copy>
      <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase14}" target="all.appserver"/>
      <exec executable="ant" dir="${target.dir}/${testcase14}" vmlauncher="false">
           <arg value="test"/>
      </exec>

      <property name="testcase15" value="2tier-servicelocator-multiple-relations-tomcat5-hibernate3"/>
      <delete dir="${target.dir}/${testcase15}" failonerror="false"/>
      <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

          <arg value="${target.dir}/${testcase15}"/>
          <arg value="../test/resources/${testcase15}.xml"/>
          <arg value="true"/>
          <arg value="true"/>
          <classpath>
              <path refid="classpath"/>
          </classpath>
      </java>
       <!-- Copy the JUnit tests, that will test the business tier -->
       <copy todir="${target.dir}/${testcase15}/src/java-test" overwrite="true">
           <fileset dir="test/resources">
             <include name="**/UserManager2Test.java" />
           </fileset>
       </copy>
       <!--
        The testcase have been written for Spring.
        For the service locator examples, replace:
       org.springframework.test.AbstractDependencyInjectionSpringContextTests
       by
       junit.framework.TestCase -->

      <replace dir="${target.dir}/${testcase15}/src/java-test">
          <replacetoken>org.springframework.test.AbstractTransactionalDataSourceSpringContextTests</replacetoken>
          <replacevalue>junit.framework.TestCase</replacevalue>
      </replace>
      <!-- Copy the test hsqld database -->
      <copy todir="${target.dir}/${testcase15}" overwrite="true">
          <fileset dir="test/resources" includes="example.properties,example.script" />
      </copy>
      <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase15}" target="all.appserver"/>
      <exec executable="ant" dir="${target.dir}/${testcase15}" vmlauncher="false">
           <arg value="test"/>
      </exec>


       <property name="testcase11" value="relations-composites-jboss-servicelocator-hibernate3-annotations"/>
       <delete dir="${target.dir}/${testcase11}" failonerror="false"/>
       <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

           <arg value="${target.dir}/${testcase11}"/>
           <arg value="../test/resources/${testcase11}.xml"/>
           <arg value="true"/>
           <arg value="true"/>
           <classpath>
               <path refid="classpath"/>
           </classpath>
       </java>

       <!-- Copy the JUnit tests, that will test the business tier -->
       <copy todir="${target.dir}/${testcase11}/src/java-test" overwrite="true">
           <fileset dir="test/resources">
             <include name="**/UserManager1Test.java" />
           </fileset>
       </copy>
        <!--
         The testcase have been written for Spring.
         For the service locator examples, replace:
        org.springframework.test.AbstractDependencyInjectionSpringContextTests
        by
        junit.framework.TestCase -->
       <replace dir="${target.dir}/${testcase11}/src/java-test">
           <replacetoken>org.springframework.test.AbstractTransactionalDataSourceSpringContextTests</replacetoken>
           <replacevalue>junit.framework.TestCase</replacevalue>
       </replace>
       <!-- Copy the test hsqld database -->
       <copy todir="${target.dir}/${testcase11}" overwrite="true">
           <fileset dir="test/resources" includes="example.properties,example.script" />
       </copy>
       <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase11}" target="all.appserver"/>
       <exec executable="ant" dir="${target.dir}/${testcase11}" vmlauncher="false">
            <arg value="test"/>
       </exec>

       <property name="testcase12" value="relations-composites-jboss-spring-hibernate3-annotations"/>
       <delete dir="${target.dir}/${testcase12}" failonerror="false"/>
       <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

           <arg value="${target.dir}/${testcase12}"/>
           <arg value="../test/resources/${testcase12}.xml"/>
           <arg value="true"/>
           <arg value="true"/>
           <classpath>
               <path refid="classpath"/>
           </classpath>
       </java>
       <!-- Copy the JUnit tests, that will test the business tier -->
       <copy todir="${target.dir}/${testcase12}/src/java-test" overwrite="true">
           <fileset dir="test/resources">
             <include name="**/UserManagerTest.java" />
           </fileset>
       </copy>
       <!-- Copy the test hsqld database -->
       <copy todir="${target.dir}/${testcase12}" overwrite="true">
           <fileset dir="test/resources" includes="example.properties,example.script" />
       </copy>
       <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcase12}" target="all.appserver"/>
       <exec executable="ant" dir="${target.dir}/${testcase12}" vmlauncher="false">
            <arg value="test"/>
        </exec>

       <!-- This will actually test the hibernate facades using hsqldb with testdata -->
       <property name="testcaseHsqldb" value="tomcat-hsqldb-spring-hibernate3"/>
       <delete dir="${target.dir}/${testcaseHsqldb}" failonerror="false"/>
       <java fork="true" classname="com.finalist.jag.JApplicationGen" dir="${bin}">

           <arg value="${target.dir}/${testcaseHsqldb}"/>
           <arg value="../test/resources/${testcaseHsqldb}.xml"/>
           <arg value="true"/>
           <arg value="true"/>
           <classpath>
               <path refid="classpath"/>
           </classpath>
       </java>
       <!-- Copy the JUnit tests, that will test the business tier -->
       <copy todir="${target.dir}/${testcaseHsqldb}/src/java-test" overwrite="true">
           <fileset dir="test/resources">
             <include name="**/UserManager1Test.java" />
           </fileset>
       </copy>
       <!-- Copy the test hsqld database -->
       <copy todir="${target.dir}/${testcaseHsqldb}" overwrite="true">
           <fileset dir="test/resources" includes="example.properties,example.script" />
       </copy>
       <ant inheritAll="false" antfile="build.xml" dir="${target.dir}/${testcaseHsqldb}" target="all.appserver"/>
       <exec executable="ant" dir="${target.dir}/${testcaseHsqldb}" vmlauncher="false">
            <arg value="test"/>
        </exec>

   </target>

    <!-- Initialize for the autobuild. Not needed here. -->

    <target name="init.autobuild"
        description="Will be called by the autobuild before calling run.autobuild. Initialization can be done here.">
        <!-- No initialization needed -->
    </target>

    <!-- Runs all targets needed to perform an autobuild. -->
    <!--
    <target name="run.autobuild" depends="messages.autobuild,javadoc,test"
       description="Runs the autobuild. Add in the depend list all steps that should be taken by the autobuild."/>
    -->
    <target name="run.autobuild" depends="test"
        description="Runs the autobuild. Add in the depend list all steps that should be taken by the autobuild."/>

    <target name="finish.autobuild" description="Will be called by the autobuild after the run.autobuild has been completed. Here all targets should be called to complete the autobuild like mailing/copying results, clean up deploy directories etc..">
        <antcall target="copy.autobuild.results"/>
        <echo message="The autobuild has finished."/>
    </target>

    <!-- Copies the results of the autobuild to the webserver environment. -->

    <target name="copy.autobuild.results">
        <mkdir dir="${apache.dir}/${project.name}"/>
        <!--
        <copy todir="${apache.dir}/${project.name}">
           <fileset dir="maven/target/docs"/>
        </copy>
        -->
        <copy failonerror="false" file="build.log" tofile="${apache.dir}/${project.name}/buildlog/build.txt"/>
    </target>

    <target name="generate.docbook" depends="checkout.docbook">
        <mkdir dir="${docbook.dir.html}"/>
        <mkdir dir="${docbook.dir.pdf}"/>
        <taskdef name="param" classpathref="classpath" classname="com.finalist.ant.tasks.docbook.XSLTParameterTask"/>
        <taskdef name="pdf" classpathref="classpath" classname="com.finalist.ant.tasks.docbook.PDFTask"/>
        <taskdef name="html" classpathref="classpath" classname="com.finalist.ant.tasks.docbook.HTMLTask"/>
        <!--
        <echo message="Docbook HTML generation"/>
        <html xslfile="${docbook.xsl.dir}/html/docbook.xsl" outputdir="${docbook.dir.html}">
           <fileset dir="${docbook.dir}">
             <include name="*.xml"/>
           </fileset>
            <param name="html.stylesheet" value="html.css"/>
            <param name="paper.type" value="A4"/>
            <param name="section.autolabel" value="1"/>
            <param name="section.label.includes.component.label" value="1"/>
            <param name="draft.watermark.image" value=''/>
        </html>
         -->
        <echo message="Docbook PDF generation of jag"/>
        <pdf xslfile="${docbook.xsl.dir}/fo/docbook.xsl" outputdir="${docbook.dir.pdf}">
            <fileset dir=".">

                <include name="${docbook.dir}/**/*.xml"/>
            </fileset>
            <param name="paper.type" value="A4"/>
            <param name="section.autolabel" value="1"/>
            <param name="section.label.includes.component.label" value="1"/>
            <param name="draft.watermark.image" value=''/>
        </pdf>

    </target>

    <target name="checkout.docbook" depends="check.xsl.dir.internal" unless="xsl.checkout.done" description="XSL-checkout for needed XSL files and jars">
        <antcall target="checkout.docbook.internal"/>
    </target>

    <target name="checkout.docbook.internal">
        <mkdir dir="${lib}/docbook"/>
        <get src="http://www.ibiblio.org/maven/fop/jars/fop-0.20.5.jar" dest="${lib}/docbook/fop-0.20.5.jar"/>
        <get src="http://www.ibiblio.org/maven/batik/jars/batik-1.1.1.jar" dest="${lib}/docbook/batik-1.1.1.jar"/>
        <get src="http://www.ibiblio.org/maven/avalon-framework/jars/avalon-framework-4.0.jar" dest="${lib}/docbook/avalon-framework-4.0.jar"/>
        <get src="http://www.ibiblio.com/maven/docbook/zips/docbook-xsl-${docbook.xsl.version}.zip" dest="${lib}/docbook/docbook-xsl-${docbook.xsl.version}.zip"/>
        <get src="http://jag.sourceforge.net/download/jag/jars/finalist-ant-${finalist.ant.version}.jar" dest="${lib}/docbook/finalist-ant-${finalist.ant.version}.jar"/>
        <unzip src="${lib}/docbook/docbook-xsl-${docbook.xsl.version}.zip" dest="."/>
        <!-- Now unzip the docbook jars to the xsl directory. -->

    </target>

    <target name="check.xsl.dir.internal">
        <available file="${docbook.xsl.dir}" property="xsl.checkout.done" type="dir"/>
    </target>


   <target name="test" depends="jag.castor.xsd,jag.xmlbeans.xsd,junit.report" description="Run JUnit test.">
   </target>

   <target name="jag.xmlbeans.xsd" depends="init"
                description="Generate Java source files from XSD.">

   <java classname="org.apache.xmlbeans.impl.tool.SchemaCompiler"
             classpathref="classpath"
             fork="true">
         <arg value="-d"/>
         <arg value="${build.jag}"/>
         <arg value="conf/jag.xsd"/>
       </java>

   </target>


   <target name="jag.castor.xsd" depends="init"
                description="Generate Java source files from XSD.">

      <!--
      To marshal an instance of the Skelet class you simply call the Marshaller as follows:
      // Create a new Skelet object
      Skelet skelet = new Skelet();
      // Some modules should be added..
      // Create a File to marshal to
      writer = new FileWriter("test.xml");
      // Marshal the skelet object
      Marshaller.marshal(skelet, writer);
               To unmarshal an instance of the Skelet class you simply call the Unmarshaller as follows:
      // Create a Reader to the file to unmarshal from
      reader = new FileReader("test.xml");
      // Marshal the skelet object
      Skelet skelet = (Skelet)Unmarshaller.unmarshal(Skelet.class, reader);
      -->

       <taskdef name="castor-srcgen"
                   classname="org.exolab.castor.tools.ant.taskdefs.CastorSourceGenTask"
                   classpathref="classpath" />
       <mkdir dir="generated" />
       <castor-srcgen file="conf/jag.xsd"
                         todir="test/java"
                         package="com.finalist.generated.castor"
                         types="j2"
                         warnings="false" />
     </target>
   <!-- Compiles all sources that reside in the 'src.test.dir' to the 'build.test.dir' directory. -->

      <target name="build.test" description="Compile test classes" depends="build.jag">
         <delete dir="build-test" failonerror="false"/>
         <mkdir dir="build-test" />
         <javac debug="true" deprecation="true" destdir="build-test" srcdir="test/java">
            <classpath>
               <path refid="classpath"/>
            </classpath>
         </javac>
      </target>

   <!-- Runs JUnit tests. -->
      <target name="junit" description="Runs All JUnit tests" depends="build.test">
         <echo message="Make sure the junit.jar and optional.jar file are in your ant\lib directory"/>
         <delete dir="report"/>
         <mkdir dir="report"/>
         <mkdir dir="report/xml"/>
         <mkdir dir="report/html"/>

         <echo message="Running unit tests..."/>
         <junit fork="yes" haltonfailure="no" showOutput="yes" printSummary="on">
            <classpath>
               <pathelement location="build-test"/>
               <pathelement location="classes"/>
               <path refid="classpath"/>
            </classpath>
            <batchtest todir="report/xml">
               <fileset dir="build-test">
                  <include name="**/*TestCase.class"/>
                  <include name="**/*Test.class"/>
               </fileset>
               <formatter type="xml"/>
            </batchtest>
         </junit>
         <delete>
            <fileset dir="build-test" includes="**/*Test.class"/>
         </delete>
      </target>


   <!-- Generates test reports. -->

      <target name="junit.report" description="Generates JUnit test reports" depends="junit">
         <taskdef classpathref="classpath" name="junitreport"
                  classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator"/>
         <junitreport todir="report/html">
            <fileset dir="report/xml">
               <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="report/html"/>
         </junitreport>
      </target>

   <!--
   Start the hsql db admin tool
   -->
   <target name="db.gui" description="Start the hsqldb admin tool">
      <property name="database.urlparams" value="?user=sa&amp;password="/>
      <java
         classname="org.hsqldb.util.DatabaseManager"
         fork="yes"
         classpathref="classpath"
         failonerror="true"
      >
         <arg value="-url"/>
         <arg value="jdbc:hsqldb:test/resources/example"/>
         <arg value="-driver"/>
         <arg value="org.hsqldb.jdbcDriver"/>
      </java>
   </target>


</project>