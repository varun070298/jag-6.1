#*  Copyright (C) 2005 Finalist IT Group

    This file is part of JAG - the Java J2EE Application Generator

    JAG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    JAG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with JAG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#if (${config.templateSettings.serviceTier} == "Spring")
////File: ${paths.ConfigOutput}/WEB-INF/declarativeServices.xml
#if (${config.useJava5()})
## Only use annotations if java5 was enabled.
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<description>
		Generic auto-proxy definitions enabling declarative transaction management,
		based on JDK 1.5+ annotations. The application context must define a
		PlatformTransactionManager bean with name "transactionManager" (the bean
		name can be adapted in the corresponding bean reference below).

		This file is generic, and not specific to JPetStore. You can use it unchanged
		as an application context definition file for your own applications to get
		annotation-driven declarative transaction management.

		The power of this approach is more apparent when you have many transactional
		business objects, not just one as in this simple application.

		Add more Advisor definitions if you want, for additional declarative services.
		Advisors are detected by type: therefore, no explicit references are necessary.
	</description>

	<!--
		This bean is a post-processor that will automatically apply relevant advisors
		to any bean in child factories.
	-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

	<!--
		AOP advisor that will provide declarative transaction management based on
		attributes. It's possible to add arbitrary custom Advisor implementations
		as well, and they will also be evaluated and applied automatically.
	-->
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor"><ref bean="transactionInterceptor"/></property>
	</bean>

	<!--
		Transaction interceptor to use for auto-proxy creation.
		Transaction attributes will be read in from JDK 1.5+ annotations.
	-->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager"><ref bean="transactionManager"/></property>
		<property name="transactionAttributeSource">
			<bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
		</property>
	</bean>

</beans>
#else
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<description>
		Generic auto-proxy definitions enabling declarative transaction management,
		based on Commons Attributes attributes. The application context must define
		a PlatformTransactionManager bean with name "transactionManager" (the bean
		name can be adapted in the corresponding bean reference below).

		This file is generic, and not specific to JPetStore. You can use it unchanged
		as an application context definition file for your own applications to get
		attribute-driven declarative transaction management.

		The power of this approach is more apparent when you have many transactional
		business objects, not just one as in this simple application.

		Add more Advisor definitions if you want, for additional declarative services.
		Advisors are detected by type: therefore, no explicit references are necessary.
	</description>

	<!--
		This bean is a post-processor that will automatically apply relevant advisors
		to any bean in child factories.
	-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

	<!--
		AOP advisor that will provide declarative transaction management based on
		attributes. It's possible to add arbitrary custom Advisor implementations
		as well, and they will also be evaluated and applied automatically.
	-->
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor"><ref bean="transactionInterceptor"/></property>
	</bean>

	<!--
		Transaction interceptor to use for auto-proxy creation.
		Transaction attributes will be read in from class-level metadata.
	-->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager"><ref bean="transactionManager"/></property>
		<property name="transactionAttributeSource">
			<bean class="org.springframework.transaction.interceptor.AttributesTransactionAttributeSource">
				<property name="attributes"><ref bean="attributes"/></property>
			</bean>
		</property>
	</bean>

	<!--
		Commons Attributes Attributes implementation. Replace with another
		implementation of org.springframework.metadata.Attributes to source
		attributes from a different source.
	-->
	<bean id="attributes" class="org.springframework.metadata.commons.CommonsAttributes"/>
	
</beans>
#end
#end