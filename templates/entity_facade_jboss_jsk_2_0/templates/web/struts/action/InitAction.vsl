#*  Copyright (C) 2003 Finalist IT Group

    This file is part of JAG - the Java J2EE Application Generator

    JAG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    JAG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with JAG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#if (${config.templateSettings.webTier} == "Struts 1.2")
#foreach($sessionBean in $sessions)
#foreach($entityBean in $sessionBean.Entities)

////File: ${paths.WebOutput}/${app.RootPath}/actions/Init${entityBean.Name}Action.java
package ${app.RootPackage}.actions;

import javax.servlet.*;
import javax.servlet.http.*;
import java.text.SimpleDateFormat;
#if (${config.templateSettings.serviceTier} == "ServiceLocator")
import ${app.RootPackage}.servicelocator.*;
#end
import ${sessionBean.RootPackage}.${sessionBean.Name}Service;
import org.apache.struts.action.*;

import com.finalist.util.log.*;
import com.finalist.util.*;
import com.finalist.util.genelv.struts.GenericAction;
import ${sessionBean.RootPackage}.*;
import ${entityBean.RootPackage}.*;
import com.finalist.Constants;
import ${app.RootPackage}.forms.*;


/**
 * Struts 'Init' Action; prepares any information needed prior to displaying the '${entityBean.Name.Desentensized}Form'.
 *
 * @author  $config.authorText  $config.companyText
 * @version $Revision: 1.13 $, $Date: 2006/04/30 09:07:19 $
 * @struts.action path="/init${entityBean.Name}"
#if (${config.templateSettings.serviceTier} == "Spring")
 *                type="org.springframework.web.struts.DelegatingActionProxy" 
#else
 *                type="${app.RootPackage}.actions.Init${entityBean.Name}Action"                 
#end
 *                name="${entityBean.Name.Desentensized}Form"
 *                scope="#if ($entityBean.HasRelations)
session#else
request#end"
 *                validate="false"
 * @struts.action-forward name="success" path="/${entityBean.Name.Lower}.jsp"
 *
#if (${config.templateSettings.serviceTier} == "Spring")
 * @spring.bean name="/init${entityBean.Name}"
#end
 */
public class Init${entityBean.Name}Action extends ServiceAction {
   private Logger log = LogService.getLogger(this.getClass());

   /**
    * Performs an action.
    *
    * @param mapping The ActionMapping used to select this instance
    * @param actionForm The optional ActionForm bean for this request (if any)
    * @param request The optional ActionForm bean for this request (if any)
    * @param response The HTTP response we are creating
    * @return describes where and how control should be forwarded, or <code>null</code> if the response has already
    *         been completed
    * @throws Exception in case of an error
    */
   public ActionForward doPerform(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
                                  HttpServletResponse response) throws Exception {
      log.info("start doPerform");
      ${entityBean.Name}Form form = (${entityBean.Name}Form) actionForm;
      HttpSession session  = request.getSession();
#foreach ($primaryKeyField in $entityBean.PkFields)
      String ${primaryKeyField.Name} = request.getParameter("${primaryKeyField.Name}");
#end

#foreach ($primaryKeyField in $entityBean.PkFields)
      if (${primaryKeyField.Name} != null && ${primaryKeyField.Name}.equalsIgnoreCase("null")) {
         ${primaryKeyField.Name} = null;
      }
#end

      if (form == null) {
         form = new ${entityBean.Name}Form();

         if ("request".equals(mapping.getScope())) {
            request.setAttribute(mapping.getAttribute(), form);
         }
         else {
            session.setAttribute(mapping.getAttribute(), form);
         }
      }

      if (#foreach ($primaryKeyField in $entityBean.PkFields)${primaryKeyField.Name} != null && #end true) { // hack to allow automatic generation of sources with JAG
         try {
            form.setMode("change");
#if (${entityBean.isCompositeKey()})
            ${entityBean.PrimaryKeyType} id${entityBean.Name} = new ${entityBean.PrimaryKeyType}();

#foreach ($primaryKeyField in $entityBean.PkFields)
            id${entityBean.Name}.set${primaryKeyField.Name.Sentensized}(#if (${primaryKeyField.Type.equals("java.sql.Date")})
new java.sql.Date(DATE_FORMATTER.parse(${primaryKeyField.Name}).getTime()));
#elseif (${primaryKeyField.Type.equals("java.sql.Timestamp")})
new java.sql.Timestamp(TIMESTAMP_FORMATTER.parse(${primaryKeyField.Name}).getTime()));
#else
new ${primaryKeyField.Type}(${primaryKeyField.Name}));
#end
#end

            ${entityBean.Name}If ${entityBean.Name.Lower}Data = get${sessionBean.Name}Service().get${entityBean.Name}(id${entityBean.Name});
#else
            ${entityBean.Name}If ${entityBean.Name.Lower}Data = get${sessionBean.Name}Service().get${entityBean.Name}(new ${entityBean.PrimaryKeyType}(${entityBean.PrimaryKey}));
#end
            PropertyUtilsExt.copyProperties(form, ${entityBean.Name.Lower}Data);

#foreach ($relation in $entityBean.Relations)
            ${relation.RelatedEntity.Name}Form ${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form = new ${relation.RelatedEntity.Name}Form();
            ${relation.RelatedEntity.RootPackage}.${relation.RelatedEntity.Name}If ${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized} = ${entityBean.Name.Lower}Data.get${relation.FieldName.Sentensized}${relation.RelatedEntity.Name}();
            if (${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized} != null) {
               PropertyUtilsExt.copyProperties(${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form, ${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized});
               form.set${relation.FieldName.Sentensized}${relation.RelatedEntity.Name}(${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form);
            }
#end
         }
         catch (Throwable t) {
            servlet.log("Init${entityBean.Name}Action :", t);
            throw new ServletException("Init${entityBean.Name}Action :", t);
         }
      }
      else {
         form.setMode("new");
         PropertyUtilsExt.copyProperties(form, new ${entityBean.Name}Data());
      }
#if (${config.templateSettings.serviceTier} == "Spring")
#foreach ($relation in $entityBean.Relations)
      ${relation.RelatedEntity.Name}Form ${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form = new ${relation.RelatedEntity.Name}Form();
      ${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form.setListSize(get${relation.RelatedEntity.firstSession.Name}Service().get${relation.RelatedEntity.Name}ListSize());
      ${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form.setList(get${relation.RelatedEntity.firstSession.Name}Service().get${relation.RelatedEntity.Name}List());
      form.set${relation.FieldName.Sentensized}${relation.RelatedEntity.Name}(${relation.RelatedEntity.Name.Desentensized}${relation.FieldName.Sentensized}Form);
#end
#end

      return mapping.findForward("success");
   }
}

#end
#end
#end