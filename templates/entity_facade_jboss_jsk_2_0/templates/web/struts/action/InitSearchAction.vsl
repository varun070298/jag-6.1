#*  Copyright (C) 2003 Finalist IT Group

    This file is part of JAG - the Java J2EE Application Generator

    JAG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    JAG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with JAG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#if (${config.templateSettings.webTier} == "Struts 1.2")
#foreach($sessionBean in $sessions)
#foreach($entityBean in $sessionBean.Entities)

////File: ${paths.WebOutput}/${app.RootPath}/actions/Init${entityBean.Name}SearchAction.java
package ${app.RootPackage}.actions;

import java.util.Collection;
import java.util.Iterator;
import java.util.ArrayList;

import javax.servlet.http.*;
#if (${config.templateSettings.serviceTier} == "ServiceLocator")
import ${app.RootPackage}.servicelocator.*;
#end
import ${sessionBean.RootPackage}.${sessionBean.Name}Service;
import org.apache.struts.action.*;
import org.apache.commons.beanutils.BeanUtils;

import com.finalist.util.log.*;
import ${sessionBean.RootPackage}.*;
import ${app.RootPackage}.forms.${entityBean.Name}SearchForm;
import ${entityBean.RootPackage}.*;

/**
 * The initialise Action for the ${entityBean.Name.Desentensized} search screen.
 *
 * @author  $config.authorText  $config.companyText
 * @version $Revision: 1.12 $, $Date: 2005/06/29 20:56:27 $
 * @struts.action path="/init${entityBean.Name}Search"
#if (${config.templateSettings.serviceTier} == "Spring")
 *                type="org.springframework.web.struts.DelegatingActionProxy"
#else
 *                type="${app.RootPackage}.actions.Init${entityBean.Name}SearchAction"
#end
 *                name="${entityBean.Name.Desentensized}SearchForm"
 *                scope="request"
 *                validate="false"
 * @struts.action-forward name="success" path="/${entityBean.Name.Lower}List.jsp"
 *
#if (${config.templateSettings.serviceTier} == "Spring")
 *@spring.bean name="/init${entityBean.Name}Search"
#end
 */
public class Init${entityBean.Name}SearchAction extends ServiceAction {

   private static Logger log = LogService.getLogger(Init${entityBean.Name}SearchAction.class);

   /**
    * Performs an action.
    *
    * @param mapping The ActionMapping used to select this instance
    * @param actionForm The optional ActionForm bean for this request (if any)
    * @param request The optional ActionForm bean for this request (if any)
    * @param response The HTTP response we are creating
    * @return describes where and how control should be forwarded, or <code>null</code> if the response has already
    *         been completed
    * @throws Exception in case of an error
    */
   public ActionForward doPerform(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
                                  HttpServletResponse response) throws Exception {
      Collection ${entityBean.Name.Desentensized}List =
            get${sessionBean.Name}Service().get${entityBean.Name}List();
      // We decorate the list with data objects that contain presentation specific methods
      ArrayList result = new ArrayList();
      if (${entityBean.Name.Desentensized}List != null) {
      Iterator iterator = ${entityBean.Name.Desentensized}List.iterator();
         while (iterator.hasNext()) {
            ${entityBean.Name}If object =  (${entityBean.Name}If) iterator.next();
            ${entityBean.Name}Data data = new ${entityBean.Name}Data();
## don't use the value object constructor here!            
            try {
               BeanUtils.copyProperties(data, object);
            } catch (Exception e) {
               // As fallback, we use the data constructor.
               log.warn("Error while copying properties using BeanUtils. Use fallback constructor...", e);
               data = new ${entityBean.Name}Data(object);
            }
            result.add(data);
         }
      }
      ((${entityBean.Name}SearchForm) actionForm).set${entityBean.Name}List(result);
      return mapping.findForward("success");
   }
}

#end
#end
#end