#*  Copyright (C) 2003 Finalist IT Group

    This file is part of JAG - the Java J2EE Application Generator

    JAG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    JAG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with JAG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
#if (${config.templateSettings.webTier} == "Struts 1.2")
#foreach($sessionBean in $sessions)
#foreach($entityBean in $sessionBean.Entities)

////File: ${paths.WebOutput}/${app.RootPath}/actions/Save${entityBean.Name}Action.java
package ${app.RootPackage}.actions;

import java.text.SimpleDateFormat;
import javax.servlet.*;
import javax.servlet.http.*;
#if (${config.templateSettings.serviceTier} == "ServiceLocator")
import ${app.RootPackage}.servicelocator.*;
#end
import ${sessionBean.RootPackage}.${sessionBean.Name}Service;
import org.apache.struts.action.*;
import ${app.RootPackage}.forms.*;
import com.finalist.util.log.*;
import com.finalist.util.*;
import com.finalist.util.genelv.struts.GenericAction;
import ${sessionBean.RootPackage}.*;
import ${entityBean.RootPackage}.*;
import com.finalist.Constants;
import ${app.RootPackage}.forms.${entityBean.Name}Form;

/**
 * Implementation of <strong>Action</strong>
 *
 * @author  $config.authorText  $config.companyText
 * @version $Revision: 1.12 $, $Date: 2005/06/29 20:56:27 $
 * @struts.action path="/save${entityBean.Name}"
#if (${config.templateSettings.serviceTier} == "Spring")
 *                type="org.springframework.web.struts.DelegatingActionProxy"
#else
 *                type="${app.RootPackage}.actions.Save${entityBean.Name}Action"
#end
 *                name="${entityBean.Name.Desentensized}Form"
 *                scope="#if ($entityBean.HasRelations)
session#else
request#end"
 *                input="/${entityBean.Name.Lower}.jsp"
 * @struts.action-forward name="success" path="/init${entityBean.Name}Search.do"
 *
#if (${config.templateSettings.serviceTier} == "Spring")
 * @spring.bean name="/save${entityBean.Name}"
#end
 */
public class Save${entityBean.Name}Action extends ServiceAction {
   private transient Logger log = LogService.getLogger(this.getClass());

   /**
    * Performs an action.
    *
    * @param mapping The ActionMapping used to select this instance
    * @param form The optional ActionForm bean for this request (if any)
    * @param request The optional ActionForm bean for this request (if any)
    * @param response The HTTP response we are creating
    * @return describes where and how control should be forwarded, or <code>null</code> if the response has already
    *         been completed
    * @throws Exception in case of an error
    */
   public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request,
                                HttpServletResponse response) throws Exception {

      log.info("start doPerform");
      HttpSession session = request.getSession();
      ${entityBean.Name}Form subform = (${entityBean.Name}Form) form;
#foreach ($pkField in $entityBean.PkFields)
      String ${pkField.Name} = subform.get${pkField.Name.Sentensized}();
      if (${pkField.Name} != null && (${pkField.Name}.equalsIgnoreCase("null") || ${pkField.Name}.length() < 1)) {
         ${pkField.Name} = null;
         subform.set${pkField.Name.Sentensized}(null);
      }
#end
      ${sessionBean.RootPackage}.${sessionBean.Name}Service facade = get${sessionBean.Name}Service();

      // Was this transaction cancelled?
      if (isCancelled(request)) {
         if (mapping.getAttribute() != null) {
            session.removeAttribute(mapping.getAttribute());
         }
         return (mapping.findForward("success"));
      }

      try {
         // Retrieve the information       
         ${entityBean.Name}Data data = new ${entityBean.Name}Data();

#foreach($relation in $entityBean.Relations)
         ${relation.RelatedEntity.Name}Form the${relation.RelatedEntity.Name}${relation.FieldName.Sentensized}Form = subform.get${relation.FieldName.Sentensized}${relation.RelatedEntity.Name}();
         subform.set${relation.FieldName.Sentensized}(the${relation.RelatedEntity.Name}${relation.FieldName.Sentensized}Form.get${relation.ForeignPkFieldName.Sentensized}());
#end

         PropertyUtilsExt.copyProperties(data, subform);
         // Save to database..
         if ("new".equals(subform.getMode())) {
            if (request.getParameter("submit") != null) {
               facade.add${entityBean.Name}(data);
            }
         }
         else {
            if (request.getParameter("submit") != null) {
               facade.save${entityBean.Name}(data);
            }
            else if (request.getParameter(Constants.SUBMIT_NO_VALIDATION) != null) {
#if ($entityBean.isCompositeKey())
               ${entityBean.PrimaryKeyType} id${entityBean.Name} =
                     new ${entityBean.PrimaryKeyType}();
#foreach ($pkField in $entityBean.PkFields)
               id${entityBean.Name}.set${pkField.Name.Sentensized}(#if (${pkField.Type.equals("java.sql.Date")})
new java.sql.Date(DATE_FORMATTER.parse(${pkField.Name}).getTime()));
#elseif (${pkField.Type.equals("java.sql.Timestamp")})
new java.sql.Timestamp(TIMESTAMP_FORMATTER.parse(${pkField.Name}).getTime()));
#else
new ${pkField.Type}(${pkField.Name}));
#end
#end
               facade.delete${entityBean.Name}(id${entityBean.Name});
#else
               facade.delete${entityBean.Name}(data.get${entityBean.PrimaryKey.Name.Sentensized}());
#end
            }
         }
      }
      catch (Throwable t) {
         log.error("Save${entityBean.Name}Action :", t);
         throw new Exception("Save${entityBean.Name}Action :", t);
      }

      // Remove the obsolete form bean
      if (mapping.getAttribute() != null) {
         if ("request".equals(mapping.getScope())) {
            request.removeAttribute(mapping.getAttribute());
         }
         else {
            session.removeAttribute(mapping.getAttribute());
         }
      }

      return mapping.findForward("success");
   }
}

#end
#end
#end