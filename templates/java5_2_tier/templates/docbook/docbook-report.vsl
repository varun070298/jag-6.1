#*  Copyright (C) 2005 Finalist IT Group

    This file is part of JAG - the Java J2EE Application Generator

    JAG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    JAG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with JAG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*#
////File: doc/docbook/service-interface.xml
##
## Generate a docbook report of the service interfaces.
## @author $config.authorText  $config.companyText
## @version 0.1
##
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article id="jagreport">
  <articleinfo>
    <title>Service Interface of ${app.Description}</title>
    <author>
      <firstname>Rudie</firstname>
      <surname>Ekkelenkamp</surname>
      <affiliation>
        <orgname>Finalist IT Group</orgname>
        <address>
               <street>Stationsplein 45</street>,
               <postcode>3013 AK </postcode>
               <city>Rotterdam</city>,
               <country>The Netherlands</country>,
               Phone:
               <phone>+31 10 217 08 00</phone>,
               Fax:
               <fax>+31 10 280 96 20</fax>,
               Email:
               <email>rudie@finalist.com</email>
            </address>
      </affiliation>
    </author>
    <date>${app.getCurrentDate()}</date>
    <revhistory>
      <revision>
        <revnumber>v0.1</revnumber>

        <date>${app.getCurrentDate()}</date>

        <authorinitials>Rudie Ekkelenkamp</authorinitials>

        <revdescription>
          <para>Initial version generated by JAG.</para>
        </revdescription>
      </revision>
    </revhistory>
  </articleinfo>
  <?custom-pagebreak ?>
  <section id="overview">
    <title>Overview</title>
    <para>The following services are available.
    <itemizedlist>
#foreach ($session in $sessions)
      <listitem>
        <para>${session.Name}Service</para>
      </listitem>
#end
    </itemizedlist>
  </para>
  </section>
  <?custom-pagebreak ?>
  <section id="Services">
  <title>The service interfaces</title>
  <para>This section describes all services that are available for ${app.Description}</para>
#foreach ($session in $sessions)
  <?custom-pagebreak ?>
     <section id="${session.Name}Service">
     <title>${session.Name}Service</title>
#set ($count = 0)

#foreach ($businessMethod in $session.businessMethods)
#set ($count = $count + 1)
         <section id="$businessMethod.methodName${count}">
         <title>$businessMethod.methodName</title>
           <para>$businessMethod.description .</para>
           <para><computeroutput>$businessMethod.returnType $businessMethod.methodName (#foreach($businessArgument in $businessMethod.argumentList)#if ($count > 0),#end $businessArgument.type $businessArgument.name #set ($count = $count + 1)#end) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>
#end

#foreach ($entity in $session.Entities)
#set ($count = $count + 1)
         <section id="add${entity.Name}${count}">
         <title>add${entity.Name}</title>
           <para>Adds a new ${entity.Name.Desentensized} to the storage.</para>
           <para><computeroutput>${entity.RootPackage}.${entity.Name}If add${entity.Name}(${entity.RootPackage}.${entity.Name}If model) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="save${entity.Name}${count}">
         <title>save${entity.Name}</title>
           <para>Stores the ${entity.Name}If.</para>
           <para><computeroutput>void save${entity.Name}(${entity.RootPackage}.${entity.Name}If model) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="delete${entity.Name}${count}">
         <title>delete${entity.Name}</title>
           <para>Removes a ${entity.Name.Desentensized}.</para>
           <para><computeroutput>void delete${entity.Name}(${entity.PrimaryKeyType} id) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>
#end



#foreach ($entity in $session.EntitiesAndReferences)
#set ($count = $count + 1)
         <section id="get${entity.Name}${count}">
         <title>get${entity.Name}</title>
           <para>Retrieves a data object from the storage by its primary key.</para>
           <para><computeroutput>${entity.RootPackage}.${entity.Name}If get${entity.Name}(${entity.PrimaryKeyType} id) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="get${entity.Name}List${count}">
         <title>get${entity.Name}List</title>
           <para>Returns a collection of all ${entity.Name.Desentensized} instances.</para>
           <para><computeroutput>Collection get${entity.Name}List() throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="get${entity.Name}List(startIndex,endIndex)${count}">
         <title>get${entity.Name}List(startIndex,endIndex)</title>
           <para>Returns a subset of all ${entity.Name.Desentensized} instances.</para>
           <para><computeroutput>Collection get${entity.Name}List(int startIndex, int endIndex) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="get${entity.Name}ListSize()${count}">
         <title>get${entity.Name}ListSize()</title>
           <para>Obtains the total number of ${entity.Name.Desentensized} objects in the storage.</para>
           <para><computeroutput>int get${entity.Name}ListSize() throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>
#end


#foreach ($entity in $session.Entities)
#foreach($relation in $entity.getEntitiesRelations())
#if ($relation.isBidirectional())
## Only if the relation is bidirectional, we put a method here to support it.
## Currently only one to many is supported..
#if ($relation.isTargetMultiple())
## this is a one-to-many relation
         <section id="get${relation.localEntity.Name}List(${entity.Name}If)${count}">
         <title>get${relation.localEntity.Name}List(${entity.Name}If)</title>
           <para>Get a list of related ${relation.localEntity.Name}If objects of the ${entity.Name}If object.</para>
           <para><computeroutput>public java.util.Collection get${relation.localEntity.Name}List(${entity.Name}If ${entity.Name.Desentensized}) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="set${relation.localEntity.Name}List${count}">
         <title>set${relation.localEntity.Name}List</title>
           <para>Set a list of ${relation.localEntity.Name}If related objects to the ${entity.Name}If object.</para>
           <para><computeroutput>set${relation.localEntity.Name}List(${entity.Name}If ${entity.Name.Desentensized}, java.util.Collection ${relation.localEntity.Name.Desentensized}List) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>

         <section id="add${relation.localEntity.Name}${count}">
         <title>add${relation.localEntity.Name}</title>
           <para>Add ${relation.localEntity.Name}If to ${entity.Name}If .</para>
           <para><computeroutput>add${relation.localEntity.Name}(${entity.Name}If ${entity.Name.Desentensized}, ${relation.localEntity.Name}If ${relation.localEntity.Name.Desentensized}) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>
#end
#end
#end
#end

#foreach ($entity in $session.EntitiesAndReferences)
#foreach ($field in $entity.NonRelationFields)
#if ($field.isPrimaryKey())
## Do nothing for primary key fields. They should be looked up with there get method.
#else
         <section id="find${entity.Name}By${field.Name.Sentensized}${count}">
         <title>find${entity.Name}By${field.Name.Sentensized}</title>
           <para>Retrieves a list of data object for the specified $field.Name field.</para>
           <para><computeroutput>java.util.Collection find${entity.Name}By${field.Name.Sentensized}($field.Type $field.Name) throws ${app.RootPackage}.exception.GenericBusinessException</computeroutput></para>
         </section>
#end
#end
#end
   </section>
#end
     </section>
</article>
