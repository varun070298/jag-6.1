#*  Copyright (C) 2006 Finalist IT Group

    This file is part of JAG - the Java J2EE Application Generator

    JAG is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    JAG is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with JAG; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Author: Onno Scheffers, Piraya (http://www.piraya.nl)
*#
#if (${config.templateSettings.webTier} == "Tapestry 4")
////File: ./src/java-web/${app.RootPath}/core/ItemSelectionModel.java
package ${app.RootPackage}.core;

import org.apache.tapestry.form.IPropertySelectionModel;

import java.io.Serializable;
import java.util.List;

import com.finalist.Constants;

/**
 * ItemSelectionModel for using in a DropDown list of Objects.
 *
 * @author  $config.authorText  $config.companyText
 * @version $Revision: 1.3 $, $Date: 2006/01/20 13:10:17 $
 */
public abstract class ItemSelectionModel<Z> implements IPropertySelectionModel, Serializable {
   private List<Z> items;
   private boolean nullable;

   /**
    * Constructs a new ItemSelectionModel with the List of items the user should pick one from.
    *
    * @param items The List of items to show in the dropdown list.
    */
   public ItemSelectionModel(List<Z> items) {
      this.items = items;
   }

   /**
    * Constructs a new ItemSelectionModel with the List of items the user should pick one from.
    *
    * @param items The List of items to show in the dropdown list.
    * @param nullable True if the user is not required to make a selection (first option will be empty).
    */
   public ItemSelectionModel(List<Z> items, boolean nullable) {
      this.items = items;
      this.nullable = nullable;
   }

   /** {@inheritDoc} */
   public int getOptionCount() {
      return items.size() + (nullable ? 1 : 0);
   }

   /** {@inheritDoc} */
   public Z getOption(int index) {
      if (nullable) {
         if (index == 0) {
            return null;
         }
         return items.get(index - 1);
      }
      return items.get(index);
   }

   /** {@inheritDoc} */
   public String getLabel(int index) {
      if (nullable) {
         if (index == 0) {
            return Constants.EMPTY_SELECT_OPTION;
         }
         return getLabelForItem(items.get(index - 1));
      }
      return getLabelForItem(items.get(index));
   }

   /** {@inheritDoc} */
   public String getValue(int index) {
      return Integer.toString(index);
   }

   /** {@inheritDoc} */
   public Object translateValue(String value) {
      if(value == null || "".equals(value)) {
         return null;
      }
      return getOption(Integer.parseInt(value));
   }

   /**
    * This method should be implemented to control the way the item is rendered. Usually this method will
    * be implemented by using an anonymous inner class that extends this ItemSelectionModel. It allows you
    * to easily control how the labels are rendered for each dropdown.
    *
    * @param item The item to create the label for.
    * @return The String that should appear in the dropdown box on the client for the given item.
    */
   public abstract String getLabelForItem(Z item);
}
#end